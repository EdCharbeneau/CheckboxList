@typeparam TItem

<div id="checkboxes" @attributes="AdditionalAttributes">

    @foreach (var item in Items)
    {
        var id = Guid.NewGuid();
        <div>
            <input id="@id" type="checkbox" class="@InputCss" @onchange="_ => HandleChange(item)" />
            <label for="@id" class="@LabelCss">
                @if (ItemTemplate is null)
                {
                    GetValue(item);
                }
                else
                {
                    @ItemTemplate(item)
                }
            </label>
        </div>
    }

    <style>
    #checkboxes {
        display: grid;
        gap: 1rem;
        grid-template-columns: 1fr 1fr;
    }

    @@media (min-width:768px) {
    #checkboxes {
        grid-template-columns: @GridColumns;
    }
}
    </style>

</div>


@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, Object>();

    [Parameter]
    public string TextField { get; set; }

    [Parameter]
    public string LabelCss { get; set; }

    [Parameter]
    public string InputCss { get; set; }

    [Parameter]
    public int NoOfColumns { get; set; } = 4;


    private string GridColumns => String.Concat(Enumerable.Repeat("1fr ", NoOfColumns));

    private object GetValue(TItem item)
    {
        return item.GetType().GetProperty(TextField).GetValue(item, null);
    }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public List<TItem> SelectedItems { get; set; }

    [Parameter]
    public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }

    void HandleChange(TItem item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }
        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

}
